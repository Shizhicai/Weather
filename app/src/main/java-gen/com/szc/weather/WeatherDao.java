package com.szc.weather;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WEATHER".
*/
public class WeatherDao extends AbstractDao<Weather, Long> {

    public static final String TABLENAME = "WEATHER";

    /**
     * Properties of entity Weather.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property City = new Property(1, String.class, "city", false, "CITY");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Temperature = new Property(3, Integer.class, "temperature", false, "TEMPERATURE");
        public final static Property High = new Property(4, String.class, "high", false, "HIGH");
        public final static Property Low = new Property(5, String.class, "low", false, "LOW");
        public final static Property Ganmao = new Property(6, String.class, "ganmao", false, "GANMAO");
        public final static Property Fengxiang = new Property(7, String.class, "fengxiang", false, "FENGXIANG");
    }


    public WeatherDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WEATHER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CITY\" TEXT," + // 1: city
                "\"DATE\" TEXT," + // 2: date
                "\"TEMPERATURE\" INTEGER," + // 3: temperature
                "\"HIGH\" TEXT," + // 4: high
                "\"LOW\" TEXT," + // 5: low
                "\"GANMAO\" TEXT," + // 6: ganmao
                "\"FENGXIANG\" TEXT);"); // 7: fengxiang
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WEATHER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Weather entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(2, city);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        Integer temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindLong(4, temperature);
        }
 
        String high = entity.getHigh();
        if (high != null) {
            stmt.bindString(5, high);
        }
 
        String low = entity.getLow();
        if (low != null) {
            stmt.bindString(6, low);
        }
 
        String ganmao = entity.getGanmao();
        if (ganmao != null) {
            stmt.bindString(7, ganmao);
        }
 
        String fengxiang = entity.getFengxiang();
        if (fengxiang != null) {
            stmt.bindString(8, fengxiang);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Weather entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(2, city);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }
 
        Integer temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindLong(4, temperature);
        }
 
        String high = entity.getHigh();
        if (high != null) {
            stmt.bindString(5, high);
        }
 
        String low = entity.getLow();
        if (low != null) {
            stmt.bindString(6, low);
        }
 
        String ganmao = entity.getGanmao();
        if (ganmao != null) {
            stmt.bindString(7, ganmao);
        }
 
        String fengxiang = entity.getFengxiang();
        if (fengxiang != null) {
            stmt.bindString(8, fengxiang);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Weather readEntity(Cursor cursor, int offset) {
        Weather entity = new Weather( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // city
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // temperature
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // high
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // low
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ganmao
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // fengxiang
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Weather entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCity(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTemperature(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setHigh(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLow(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGanmao(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFengxiang(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Weather entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Weather entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Weather entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
